# -*- coding: utf-8 -*-
"""intrusion detection system
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1kyt50JZi3xZa8yRFvHBtmNPxHqaBSsHn
"""

#n -import important packages (this might change as we move forward with the project)

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import time

#SK - libraries for Evaluate and measure the accuracy of the model
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

#n -libraries for the files in google drive
from pydrive.auth import GoogleAuth
from google.colab import drive
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

from google.colab import drive
drive.mount('/content/drive')

#load dataset
df = pd.read_csv('/content/drive/MyDrive/kddcup99_csv.csv')
df.columns
df.info() #n

#n -check for any missing values
print(df.isnull().sum())
duplicates = df.duplicated()
print('Number of duplicate entries:', duplicates.sum())

#Remove duplicate rows
df = df.drop_duplicates()
print('Number of duplicate entries after removing:', df.duplicated().sum())
df.label.value_counts()

#AlAnoud AlJebreen -Convert categorical data into numerical data
df = pd.get_dummies(df, columns=['protocol_type', 'service', 'flag', 'label'])
df.to_csv('newkddcup99.csv', index=False)

#NS
corr = df.corr()
  
plt.figure(figsize =(15, 12))
  
sns.heatmap(corr)
  
plt.show()

df.drop('lnum_access_files', axis = 1, inplace = True)
df.drop('is_guest_login', axis = 1, inplace = True)
#NS - This variable is highly correlated with rerror_rate and should be ignored for analysis.
df.drop('srv_rerror_rate', axis = 1, inplace = True)
#NS - This variable is highly correlated with srv_serror_rate and should be ignored for analysis.
df.drop('dst_host_srv_serror_rate', axis = 1, inplace = True)
#NS - This variable is highly correlated with rerror_rate and should be ignored for analysis.
df.drop('dst_host_serror_rate', axis = 1, inplace = True)
#NS - This variable is highly correlated with srv_rerror_rate and should be ignored for analysis.
df.drop('dst_host_rerror_rate', axis = 1, inplace = True)
#NS - This variable is highly correlated with rerror_rate and should be ignored for analysis.
df.drop('dst_host_srv_rerror_rate', axis = 1, inplace = True)
#NS - This variable is highly correlated with srv_rerror_rate and should be ignored for analysis.
df.drop('dst_host_same_srv_rate', axis = 1, inplace = True)
df 


#AlAnoud AlJebreen -Feature Selection PCA
from sklearn.decomposition import PCA
x = df.drop('label_normal', axis=1)
y = df['label_normal']
pca = PCA(n_components=3)
x_pca = pca.fit_transform(x)

#AlAnoud AlJebreen -Feature Selection RFE 
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
x = df.drop('label_normal', axis=1)
y = df['label_normal']
model = LinearRegression()
rfe = RFE(model, n_features_to_select=3)
rfe.fit(x,y) 

#SK - Split the dataset into training and testing sets (30% for test data and 70% for train data >> We can change it)
X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.3, random_state=42)
#print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

#SK - Save the training and testing datasets into separate CSV files
X_train.to_csv('train_data.csv', index=False)
X_test.to_csv('test_data.csv', index=False)
Y_train.to_csv('train_labels.csv', index=False)
Y_test.to_csv('test_labels.csv', index=False)


#SK - First Model: Decision tree 
#SK Create the decision tree classifier
dt_classifier = DecisionTreeClassifier(random_state=42)

#SK - Train the classifier on the training data
start = time.time()
dt_classifier.fit(X_train, Y_train)
print("Processing time for Training using Decision Tree Classifier: %s seconds " % (time.time() - start))

#SK - Test the Model 
start = time.time()
Y_pred = dt_classifier.predict(X_test)
print("Processing time for Testing using Decision Tree Classifier: %s seconds " % (time.time() - start)) 

#SK - Evaluate and measure the accuracy of the model
accuracy = accuracy_score(Y_test, Y_pred)
recall= recall_score(Y_test, Y_pred )
precision= precision_score(Y_test, Y_pred )
print("The accuracy of Decision Tree Classifier is : {:.2f}%".format(accuracy*100))
print("Recall = " .format(recall*100))
print("Precison = ".format(precision*100))
